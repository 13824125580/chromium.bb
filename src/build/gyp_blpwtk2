#!/usr/bin/env python

# Copyright (C) 2013 Bloomberg L.P. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script is based on gyp_chromium, and contains code copied from it.  That
# file carries the following license:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This script is a wrapper around gyp, which runs gyp using the most useful
# configurations for blpwtk2: 'msvs', 'ninjaDebug', 'ninjaRelease'.
#
# In addition to the standard gyp arguments, you can pass the names of any of
# these configurations on the command line.  If no configurations are
# specified, then gyp will be invoked with all three configurations.
#
#                       msvs              ninjaDebug        ninjaRelease
# -------------------------------------------------------------------------
# GYP_GENERATORS        msvs-ninja        ninja             ninja
# GYP_MSVS_VERSION      2010              2010              2010
# GYP_GENERATOR_FLAGS
#   config              *unset*           Debug             Release
# GYP_DEFINES
#   component           shared_library    shared_library    static_library
#   bb_ppapi_examples   0                 1                 0
#   buildtype           Dev               Dev               Official
#
# Note that values set in GYP_GENERATOR_FLAGS and GYP_DEFINES from the shell's
# environment will override the defaults specified above.  Also, any -D and -G
# flags passed on the command-line will override everything.
#
# Also note that, if GYP_GENERATORS environment is set, then this script just
# calls gyp once, without setting up the above configurations.  This is useful
# for doing project generation of a custom configuration.
#
# The path to the gyp file may be specified on the command-line.  If not
# specified, it will then be obtained from the 'BLPWTK2_GYP_FILE' environment
# variable, then the 'CHROMIUM_GYP_FILE' environment variable.  If neither is
# set, then 'src/blpwtk2/blpwtk2.gyp' will be used.

import os, sys, glob, shlex

script_dir = os.path.dirname(os.path.realpath(__file__))
chrome_src = os.path.abspath(os.path.join(script_dir, os.pardir))
blpwtk2_dir = os.path.join(chrome_src, 'blpwtk2')

# SHEZ: hack!
# Touch the gyp_chromium file so that it will be picked up by the minimizer.
os.utime(os.path.join(script_dir, "gyp_chromium"), None)

# SHEZ: hack!
# Touch the .gitignore file so that it will be picked up by the minimizer.
os.utime(os.path.join(chrome_src, ".gitignore"), None)

# SHEZ: hack!
# Touch the .gitattributes file so that it will be picked up by the minimizer.
os.utime(os.path.join(chrome_src, ".gitattributes"), None)

sys.path.insert(0, os.path.join(chrome_src, 'tools', 'gyp', 'pylib'))
import gyp

# Add paths so that pymod_do_main(...) can import files.
sys.path.insert(1, os.path.join(chrome_src, 'tools', 'generate_shim_headers'))
sys.path.insert(1, os.path.join(chrome_src, 'tools', 'grit'))
sys.path.insert(1, os.path.join(chrome_src, 'chrome', 'tools', 'build'))
sys.path.insert(1, os.path.join(chrome_src, 'native_client', 'build'))
sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'WebKit',
    'Source', 'WebCore', 'WebCore.gyp', 'scripts'))
sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'WebKit',
    'Source', 'core', 'core.gyp', 'scripts'))


# On Windows, Psyco shortens warm runs of build/gyp_chromium by about
# 20 seconds on a z600 machine with 12 GB of RAM, from 90 down to 70
# seconds.  Conversely, memory usage of build/gyp_chromium with Psyco
# maxes out at about 158 MB vs. 132 MB without it.
#
# Psyco uses native libraries, so we need to load a different
# installation depending on which OS we are running under. It has not
# been tested whether using Psyco on our Mac and Linux builds is worth
# it (the GYP running time is a lot shorter, so the JIT startup cost
# may not be worth it).
if sys.platform == 'win32':
  try:
    sys.path.insert(0, os.path.join(chrome_src, 'third_party', 'psyco_win32'))
    import psyco
  except:
    psyco = None
else:
  psyco = None

def additional_include_files(args=[]):
  """
  Returns a list of additional (.gypi) files to include, without
  duplicating ones that are already specified on the command line.
  """
  # Determine the include files specified on the command line.
  # This doesn't cover all the different option formats you can use,
  # but it's mainly intended to avoid duplicating flags on the automatic
  # makefile regeneration which only uses this format.
  specified_includes = set()
  for arg in args:
    if arg.startswith('-I') and len(arg) > 2:
      specified_includes.add(os.path.realpath(arg[2:]))

  result = []
  def AddInclude(path):
    if os.path.realpath(path) not in specified_includes:
      result.append(path)

  # Always include common.gypi.
  AddInclude(os.path.join(script_dir, 'common.gypi'))

  # Optionally add supplemental .gypi files if present.
  supplements = glob.glob(os.path.join(chrome_src, '*', 'supplement.gypi'))
  for supplement in supplements:
    AddInclude(supplement)

  return result

if 'GYP_GENERATOR_FLAGS' in os.environ:
  origGeneratorFlags = os.environ['GYP_GENERATOR_FLAGS']
else:
  origGeneratorFlags = None

if 'GYP_DEFINES' in os.environ:
  origGypDefines = os.environ['GYP_DEFINES']
else:
  origGypDefines = None

def cleanFile(fname):
  if os.path.isfile(fname):
    os.remove(fname)

def execGyp(args):
  print "Running gyp with this environment:"
  print "    GYP_GENERATORS = '" + os.environ['GYP_GENERATORS'] + "'"
  if 'GYP_MSVS_VERSION' in os.environ:
    print "    GYP_MSVS_VERSION = '" + os.environ['GYP_MSVS_VERSION'] + "'"
  if 'GYP_GENERATOR_FLAGS' in os.environ:
    print "    GYP_GENERATOR_FLAGS = '" + os.environ['GYP_GENERATOR_FLAGS'] + "'"
  if 'GYP_DEFINES' in os.environ:
    print "    GYP_DEFINES = '" + os.environ['GYP_DEFINES'] + "'"
  if len(args) > 0:
    print "    CmdlineArgs: " + " ".join(args)

  sys.stdout.flush()
  return gyp.main(args)

def restoreOriginalEnv():
  if origGeneratorFlags != None:
    os.environ['GYP_GENERATOR_FLAGS'] = origGeneratorFlags
  elif 'GYP_GENERATOR_FLAGS' in os.environ:
    del os.environ['GYP_GENERATOR_FLAGS']

  if origGypDefines != None:
    os.environ['GYP_DEFINES'] = origGypDefines
  elif 'GYP_DEFINES' in os.environ:
    del os.environ['GYP_DEFINES']

def applyVariableToEnvironment(env, var, val):
  if env in os.environ:
    envItems = os.environ[env].split(" ")
  else:
    envItems = []
  found = False
  for i in range(0, len(envItems)):
    iSplit = envItems[i].split("=")
    if iSplit[0] == var:
      # Don't change it
      found = True
      break
  if not found:
    envItems.append(var + "=" + val)
  os.environ[env] = " ".join(envItems)

def doMsvsNinja(args):
  os.environ['GYP_GENERATORS'] = 'msvs-ninja'
  os.environ['GYP_MSVS_VERSION'] = '2010'
  applyVariableToEnvironment('GYP_DEFINES', 'component', 'shared_library')
  applyVariableToEnvironment('GYP_DEFINES', 'bb_ppapi_examples', '0')
  applyVariableToEnvironment('GYP_DEFINES', 'buildtype', 'Dev')
  return execGyp(args)

def doNinjaDebug(args):
  os.environ['GYP_GENERATORS'] = 'ninja'
  os.environ['GYP_MSVS_VERSION'] = '2010'
  applyVariableToEnvironment('GYP_GENERATOR_FLAGS', 'config', 'Debug')
  applyVariableToEnvironment('GYP_DEFINES', 'component', 'shared_library')
  applyVariableToEnvironment('GYP_DEFINES', 'bb_ppapi_examples', '1')
  applyVariableToEnvironment('GYP_DEFINES', 'buildtype', 'Dev')
  return execGyp(args)

def doNinjaRelease(args):
  os.environ['GYP_GENERATORS'] = 'ninja'
  os.environ['GYP_MSVS_VERSION'] = '2010'
  applyVariableToEnvironment('GYP_GENERATOR_FLAGS', 'config', 'Release')
  applyVariableToEnvironment('GYP_DEFINES', 'component', 'static_library')
  applyVariableToEnvironment('GYP_DEFINES', 'bb_ppapi_examples', '0')
  applyVariableToEnvironment('GYP_DEFINES', 'buildtype', 'Official')
  return execGyp(args)

def main(args):
  # This could give false positives since it doesn't actually do real option
  # parsing.  Oh well.
  gyp_file_specified = False
  generatorsToUse = []
  for arg in args:
    if arg == 'msvs' or arg == 'ninjaDebug' or arg == 'ninjaRelease':
      generatorsToUse.append(arg)
    elif arg.endswith('.gyp'):
      gyp_file_specified = True

  # If none of them are specified, then do all of them.
  if not generatorsToUse:
    generatorsToUse.append('msvs')
    generatorsToUse.append('ninjaDebug')
    generatorsToUse.append('ninjaRelease')

    # Delete the generated version files, so that they will be regenerated
    # with the updated version info.
    cleanFile(os.path.join(blpwtk2_dir, 'public', 'blpwtk2_version.h'))
    cleanFile(os.path.join(blpwtk2_dir, 'public', 'blpwtk2_version.cc'))
    cleanFile(os.path.join(blpwtk2_dir, 'public', 'blpwtk2_products.h'))

  args = filter(lambda x: x not in generatorsToUse, args)

  # If we didn't get a file, check an env var, and then fall back to
  # assuming 'src/blpwtk2/blpwtk2.gyp'.
  if not gyp_file_specified:
    gyp_file = os.environ.get('BLPWTK2_GYP_FILE') or \
        os.environ.get('CHROMIUM_GYP_FILE')
    if gyp_file:
      # Note that CHROMIUM_GYP_FILE values can't have backslashes as
      # path separators even on Windows due to the use of shlex.split().
      args.extend(shlex.split(gyp_file))
    else:
      args.append(os.path.join(chrome_src, 'blpwtk2', 'blpwtk2.gyp'))

  args.extend(['-I' + i for i in additional_include_files(args)])
  args.append('--no-circular-check')

  if 'GYP_GENERATORS' in os.environ:
    return execGyp(args)

  for generator in generatorsToUse:
    if 'msvs' == generator:
      rc = doMsvsNinja(args)
    elif 'ninjaDebug' == generator:
      rc = doNinjaDebug(args)
    elif 'ninjaRelease' == generator:
      rc = doNinjaRelease(args)

    if 0 != rc:
        return rc
    restoreOriginalEnv()

  return 0

if __name__ == '__main__':
  # Use the Psyco JIT if available.
  if psyco:
    psyco.profile()
    print "Enabled Psyco JIT."

  sys.exit(main(sys.argv[1:]))

